apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: springboot-template
  title: Spring Boot Service
  description: Create a simple microservice using Spring Boot Java
  tags:
    - recommended
    - java
spec:
  owner: service@example.com
  type: service

  parameters:
    - title: Provide some simple information
      required:
        - component_id
        - owner
        - java_package_name
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component
          ui:field: EntityNamePicker
        description:
          title: Description
          type: string
          description: Help others understand what this website is for.
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
        awsSecretManager:
          title: AWS Secrets Manager
          type: string
          ui:field: awsSecretRepo
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutRender:
          - .github/workflows/*
        values:
          component_id: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          artifact_id: ${{ parameters.component_id }}
          owner: ${{ parameters.owner }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}
          http_port: 8080

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ["github.com"]
        description: This is ${{ parameters.component_id }}
        repoUrl: ${{ parameters.repoUrl }}

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

  targets:
    - type: dir
      title: src
      path: "{{ folderName }}/{{ appName }}/src"
    - type: dir
      title: config
      path: "{{ folderName }}/{{ appName }}/config"
    - type: file
      title: pom.xml
      path: "{{ folderName }}/{{ appName }}/pom.xml"
      content: |
        <?xml version="1.0"?>
        <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
          <modelVersion>4.0.0</modelVersion>
          <groupId>com.example</groupId>
          <artifactId>{{ appName }}</artifactId>
          <version>0.0.1-SNAPSHOT</version>
          <name>{{ appName }}</name>
          <description>Demo project for Spring Boot</description>
          <packaging>jar</packaging>
          ...
        </project>
In the above example, the targets section creates a directory named after the folderName parameter, with a subdirectory for the new Spring Boot application instance named after the appName parameter. It also creates subdirectories for source code (src) and configuration files (config) inside the new instance directory. Finally, it creates a pom.xml file in the new instance directory with the name of the project and other default information.

Once you have made these modifications to the catalog-info.yaml and template.yaml files, you should be able to use the modified template to create a new Spring Boot application instance inside a folder in Backstage.




manishakemani91@gmail.com
how to create custom software template for spring boot application in roadie backstage
To create a custom software template for a Spring Boot application in Roadie Backstage, you can follow these steps:

Create a new directory for your template under the templates directory in your Backstage repository. For example, you could create a directory called spring-boot-template.

Inside your new template directory, create a catalog-info.yaml file. This file should contain metadata about your template, such as its name and description. Here is an example:

yaml
Copy code
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: spring-boot-template
  description: A template for creating a new Spring Boot application
spec:
  type: repository
  owner: my-team
  lifecycle: experimental
In this example, the name field specifies the name of your template, the description field provides a brief description of the template, the type field specifies that the template creates a new repository, and the owner and lifecycle fields are optional metadata fields.

Create a template.yaml file inside your template directory. This file will define the structure of your Spring Boot application and any additional files that should be included with the template. Here is an example:
yaml
Copy code
apiVersion: backstage.io/v1alpha1
kind: Template
metadata:
  name: spring-boot-template
  description: Creates a new Spring Boot application
spec:
  parameters:
    - name: artifactId
      title: Artifact ID
      type: string
      description: The artifact ID for the new Spring Boot application
      required: true
    - name: groupId
      title: Group ID
      type: string
      description: The group ID for the new Spring Boot application
      required: true
    - name: version
      title: Version
      type: string
      description: The version of the new Spring Boot application
      default: "0.0.1-SNAPSHOT"
  targets:
    - type: repository
      title: "{{ artifactId }}"
      path: "{{ artifactId }}"
      actions:
        - name: create-spring-boot-app
          description: Create a new Spring Boot application
          type: create
          outputRepo: "{{ artifactId }}"
          outputDir: "."
          command:
            runner: local
            steps:
              - run: mvn archetype:generate -DgroupId={{ groupId }} -DartifactId={{ artifactId }} -Dversion={{ version }} -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false